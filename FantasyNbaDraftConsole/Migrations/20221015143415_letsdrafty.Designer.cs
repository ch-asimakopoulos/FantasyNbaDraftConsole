// <auto-generated />
using System;
using FantasyNbaDraftConsole.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasyNbaDraftConsole.Migrations
{
    [DbContext(typeof(NBADbContext))]
    [Migration("20221015143415_letsdrafty")]
    partial class letsdrafty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.League", b =>
                {
                    b.Property<byte>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<byte>("LeagueId"));

                    b.Property<byte>("LeagueDraftRounds")
                        .HasColumnType("smallint");

                    b.Property<bool>("LeagueInitialized")
                        .HasColumnType("boolean");

                    b.Property<string>("LeagueName")
                        .HasColumnType("text");

                    b.HasKey("LeagueId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PlayerId"));

                    b.Property<bool>("Injured")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NbaTeam")
                        .HasColumnType("text");

                    b.Property<decimal>("ProjectedAssistScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedBlockScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedFieldGoalScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedFreeThrowScore")
                        .HasColumnType("numeric");

                    b.Property<int>("ProjectedGames")
                        .HasColumnType("integer");

                    b.Property<decimal>("ProjectedMinutes")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedPointScoe")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedReboundScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedStealScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedThreePointMadeScore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProjectedTurnoverScore")
                        .HasColumnType("numeric");

                    b.Property<byte?>("TeamId")
                        .HasColumnType("smallint");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Position", b =>
                {
                    b.Property<byte>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<byte>("PositionId"));

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.HasKey("PositionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Team", b =>
                {
                    b.Property<byte>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<byte>("TeamId"));

                    b.Property<byte>("LeagueId")
                        .HasColumnType("smallint");

                    b.Property<byte>("TeamDraftPosition")
                        .HasColumnType("smallint");

                    b.Property<string>("TeamName")
                        .HasColumnType("text");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Player", b =>
                {
                    b.HasOne("FantasyNbaDraftConsole.Data.Team", "Team")
                        .WithMany("DraftedPlayers")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Position", b =>
                {
                    b.HasOne("FantasyNbaDraftConsole.Data.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Team", b =>
                {
                    b.HasOne("FantasyNbaDraftConsole.Data.League", "League")
                        .WithMany("LeagueTeams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.League", b =>
                {
                    b.Navigation("LeagueTeams");
                });

            modelBuilder.Entity("FantasyNbaDraftConsole.Data.Team", b =>
                {
                    b.Navigation("DraftedPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
